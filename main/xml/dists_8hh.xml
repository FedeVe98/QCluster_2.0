<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dists_8hh" kind="file" language="C++">
    <compoundname>dists.hh</compoundname>
    <includedby refid="em_8cc" local="yes">em.cc</includedby>
    <invincdepgraph>
      <node id="2">
        <label>em.cc</label>
        <link refid="em_8cc"/>
      </node>
      <node id="1">
        <label>dists.hh</label>
        <link refid="dists_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="dists_8hh_1a0ff48c9e8acf9a341e3b0aff7facd5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double euclidean_distance</definition>
        <argsstring>(double *x, double *y, int L, double *xt, double *quality, double *expected_qual, double *expected_freq)</argsstring>
        <name>euclidean_distance</name>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xt</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Distance functions to be used with EM clustering routine Arguments are as follows: q = centroid coordinates, appropriately normalized p = word counts, appropriately normalized L = length of the two vectors p and q centroid_tilde = vector of X_tilde values for centroid; only used in the calculation of d2* distance, otherwise this argument is irrelevant and kept to preserve the call signature Appropriate normalization (e. g., raw counts, frequencies, norm equal to 1) depends on the distance used. It should be done elsewhere </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dists.hh" line="17" column="8" bodyfile="dists.cc" bodystart="8" bodyend="18" declfile="dists.hh" declline="17" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dists_8hh_1ac061464ed33d9a2617f2459e59e0803c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double kl_distance</definition>
        <argsstring>(double *q, double *p, int L, double *centroid_tilde, double *quality, double *expected_qual, double *expected_freq)</argsstring>
        <name>kl_distance</name>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dists.hh" line="21" column="8" bodyfile="dists.cc" bodystart="21" bodyend="33" declfile="dists.hh" declline="21" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dists_8hh_1adf4cd99673143f629042b65e5df9802a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double symkl_distance</definition>
        <argsstring>(double *q, double *p, int L, double *centroid_tilde, double *quality, double *expected_qual, double *expected_freq)</argsstring>
        <name>symkl_distance</name>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dists.hh" line="25" column="8" bodyfile="dists.cc" bodystart="36" bodyend="48" declfile="dists.hh" declline="25" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dists_8hh_1a3e515f95894ad527d80791eb781da586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double d2_distance</definition>
        <argsstring>(double *q, double *p, int L, double *centroid_tilde, double *quality, double *expected_qual, double *expected_freq)</argsstring>
        <name>d2_distance</name>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dists.hh" line="29" column="8" bodyfile="dists.cc" bodystart="51" bodyend="64" declfile="dists.hh" declline="29" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dists_8hh_1aafd1b62e9d0afb6589a58d2fb9f046f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double chi2_distance</definition>
        <argsstring>(double *q, double *p, int L, double *centroid_tilde, double *quality, double *expected_qual, double *expected_freq)</argsstring>
        <name>chi2_distance</name>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dists.hh" line="34" column="8" bodyfile="dists.cc" bodystart="67" bodyend="81" declfile="dists.hh" declline="34" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dists_8hh_1a2d1c2aca4b327045b25eea1e324c8c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double d2ast_distance</definition>
        <argsstring>(double *q, double *p, int L, double *centroid_tilde, double *quality, double *expected_qual, double *expected_freq)</argsstring>
        <name>d2ast_distance</name>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>L</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dists.hh" line="39" column="8" bodyfile="dists.cc" bodystart="83" bodyend="112" declfile="dists.hh" declline="39" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>squared<sp/>euclidean<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>word<sp/>count<sp/>vector<sp/>needs<sp/>to<sp/>be<sp/>normalized<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>components<sp/>add<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dists_8hh_1a0ff48c9e8acf9a341e3b0aff7facd5ba" kindref="member">euclidean_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xt,<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KL<sp/>divergence;<sp/>expects<sp/>raw<sp/>counts<sp/>for<sp/>p<sp/>and<sp/>frequencies<sp/>for<sp/>q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dists_8hh_1ac061464ed33d9a2617f2459e59e0803c" kindref="member">kl_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>symmetrized<sp/>KL<sp/>divergence;<sp/>expects<sp/>raw<sp/>counts<sp/>for<sp/>p<sp/>and<sp/>frequencies<sp/>for<sp/>q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dists_8hh_1adf4cd99673143f629042b65e5df9802a" kindref="member">symkl_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d2<sp/>distance;<sp/>expects<sp/>any<sp/>normalization<sp/>for<sp/>p<sp/>and<sp/>unit<sp/>norm<sp/>for<sp/>q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dists_8hh_1a3e515f95894ad527d80791eb781da586" kindref="member">d2_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>chi2<sp/>distance,<sp/>inspired<sp/>by<sp/>d2*<sp/>distance;<sp/>expects<sp/>raw<sp/>counts<sp/>for<sp/>p<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>frequencies<sp/>for<sp/>q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dists_8hh_1aafd1b62e9d0afb6589a58d2fb9f046f3" kindref="member">chi2_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d2*<sp/>distance;<sp/>expects<sp/>any<sp/>normalization<sp/>for<sp/>p,<sp/>frequencies<sp/>for<sp/>q<sp/>and<sp/>unit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>for<sp/>centroid_tilde</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dists_8hh_1a2d1c2aca4b327045b25eea1e324c8c73" kindref="member">d2ast_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq);</highlight></codeline>
    </programlisting>
    <location file="dists.hh"/>
  </compounddef>
</doxygen>
