<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="centroid_8cc" kind="file" language="C++">
    <compoundname>centroid.cc</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1">
        <label>centroid.cc</label>
        <link refid="centroid_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="centroid_8cc_1a9512c5647a7181cf4563047c97045509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mean_centroid</definition>
        <argsstring>(int N, int row_length, double **freq, int num_nt, double **freq_1, double *centroid, double *centroid_tilde, double **quality, double *expected_qual, double **quality_1, double *expected_freq)</argsstring>
        <name>mean_centroid</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_length</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_nt</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Centroid evaluation functions to be used with EM clustering routine </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="centroid.cc" line="8" column="6" bodyfile="centroid.cc" bodystart="8" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="centroid_8cc_1a8b8b6be15e6fb4366a21096b37f73f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d2_centroid</definition>
        <argsstring>(int N, int row_length, double **freq, int num_nt, double **freq_1, double *centroid, double *centroid_tilde, double **quality, double *expected_qual, double **quality_1, double *expected_freq)</argsstring>
        <name>d2_centroid</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_length</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_nt</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="centroid.cc" line="28" column="6" bodyfile="centroid.cc" bodystart="28" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="centroid_8cc_1a886a7f10a61a81226aa15fea14bda705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kl_centroid</definition>
        <argsstring>(int N, int row_length, double **freq, int num_nt, double **freq_1, double *centroid, double *centroid_tilde, double **quality, double *expected_qual, double **quality_1, double *expected_freq)</argsstring>
        <name>kl_centroid</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_length</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_nt</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="centroid.cc" line="54" column="6" bodyfile="centroid.cc" bodystart="54" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="centroid_8cc_1a1d4ca9c288615493756419f13532ae2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mm_centroid</definition>
        <argsstring>(int N, int row_length, double **freq, const int num_nt, double **freq_1, double *centroid, double *centroid_tilde, double **quality, double *expected_qual, double **quality_1, double *expected_freq)</argsstring>
        <name>mm_centroid</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_length</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>num_nt</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="centroid.cc" line="82" column="6" bodyfile="centroid.cc" bodystart="82" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="centroid_8cc_1a6cd1c1c0452931f229f4450ec11ddc01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d2ast_centroid</definition>
        <argsstring>(int N, int row_length, double **freq, int num_nt, double **freq_1, double *centroid, double *centroid_tilde, double **quality, double *expected_qual, double **quality_1, double *expected_freq)</argsstring>
        <name>d2ast_centroid</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_length</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_nt</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>freq_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>centroid_tilde</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_qual</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>quality_1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>expected_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="centroid.cc" line="138" column="6" bodyfile="centroid.cc" bodystart="138" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>memset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mean<sp/>centroid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="centroid_8cc_1a9512c5647a7181cf4563047c97045509" kindref="member">mean_centroid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_length,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_nt,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq_1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality_1,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(centroid,<sp/>0,<sp/>row_length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*centroid));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;N;<sp/>n++){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>l++){</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>+=<sp/>quality[n][l];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>l++){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>/=<sp/>N;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d2<sp/>centroid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="centroid_8cc_1a8b8b6be15e6fb4366a21096b37f73f1a" kindref="member">d2_centroid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_length,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_nt,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq_1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality_1,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>total<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(centroid,<sp/>0,<sp/>row_length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*centroid));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;N;<sp/>++n){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>+=<sp/>quality[n][l];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>normalize<sp/>the<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_sq_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_sq_count<sp/>+=<sp/>centroid[l]<sp/>*<sp/>centroid[l];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>sqrt(total_sq_count);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>/=<sp/>norm;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KL<sp/>centroid<sp/>---<sp/>operates<sp/>on<sp/>raw<sp/>counts<sp/>which<sp/>do<sp/>not<sp/>have<sp/>to<sp/>be<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="centroid_8cc_1a886a7f10a61a81226aa15fea14bda705" kindref="member">kl_centroid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_length,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_nt,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq_1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality_1,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>total<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(centroid,<sp/>0,<sp/>row_length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*centroid));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;N;<sp/>++n){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>+=<sp/>quality[n][l];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>normalize<sp/>the<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_count<sp/>+=<sp/>centroid[l];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>/=<sp/>total_count;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MM<sp/>centroid<sp/>---<sp/>evaluates<sp/>frequencies<sp/>of<sp/>single<sp/>nucleotides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>coumputes<sp/>frequencies<sp/>of<sp/>words<sp/>using<sp/>zero<sp/>order<sp/>Markov<sp/>model;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>i.e.,<sp/>as<sp/>product<sp/>of<sp/>single<sp/>nucleotide<sp/>frequencies:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>f_{w1...w_k}<sp/>=<sp/>f_w1<sp/>f_w2<sp/>...<sp/>f_wk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="centroid_8cc_1a1d4ca9c288615493756419f13532ae2f" kindref="member">mm_centroid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_length,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_nt,<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq_1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality_1,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>p_method<sp/>is<sp/>global<sp/>(P1G<sp/>or<sp/>P2G)<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>calculate<sp/>centroids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_freq<sp/>!=<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//P2L:<sp/>It<sp/>uses<sp/>a<sp/>markovian<sp/>model<sp/>to<sp/>compute<sp/>the<sp/>expected<sp/>frequency<sp/>of<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nt_freq[num_nt];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(nt_freq,<sp/>0,<sp/>num_nt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nt_freq[0]));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>S=0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>frequencies<sp/>of<sp/>individual<sp/>nucleotides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;N;<sp/>n++){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;num_nt;<sp/>l++){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Number<sp/>of<sp/>occurrencies<sp/>of<sp/>LETTERS<sp/>in<sp/>the<sp/>cluster:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nt_freq[l]<sp/>+=<sp/>freq_1[n][l];<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;num_nt;<sp/>l++)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>+=<sp/>nt_freq[l];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//S<sp/>=<sp/>number<sp/>of<sp/>letter<sp/>in<sp/>the<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;num_nt;<sp/>l++){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nt_freq[l]<sp/>/=<sp/>S;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Average<sp/>frequency<sp/>of<sp/>letters<sp/>in<sp/>the<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>frequencies<sp/>of<sp/>words<sp/>using<sp/>Markov<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>l++){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>M=1;<sp/>M&lt;row_length;<sp/>M*=num_nt){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>l/M<sp/>%<sp/>num_nt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>*=<sp/>nt_freq[digit];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>P1L:<sp/>Do<sp/>not<sp/>use:<sp/>produces<sp/>extremely<sp/>unbalanced<sp/>clustering*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>tot_word<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>l=0;<sp/>l&lt;row_length;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n=0;<sp/>n&lt;N;<sp/>n++)</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>+=<sp/>freq[n][l];</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tot_word<sp/>+=<sp/>centroid[l];</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/>//Minimum<sp/>value:<sp/>0.01,<sp/>to<sp/>avoid<sp/>division<sp/>per<sp/>zero<sp/>later</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>l=0;<sp/>l&lt;row_length;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(centroid[l]<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>=<sp/>0.01;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid[l]<sp/>/=<sp/>tot_word;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>d2*<sp/>centroid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="centroid_8cc_1a6cd1c1c0452931f229f4450ec11ddc01" kindref="member">d2ast_centroid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_length,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_nt,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>freq_1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>centroid_tilde,<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_qual,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**quality_1,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*expected_freq)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>frequencies<sp/>from<sp/>MM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="centroid_8cc_1a1d4ca9c288615493756419f13532ae2f" kindref="member">mm_centroid</ref>(N,<sp/>row_length,<sp/>freq,<sp/>num_nt,<sp/>freq_1,<sp/>centroid,<sp/>NULL,<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quality,<sp/>expected_qual,<sp/>quality_1,<sp/>expected_freq);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>X_tilde</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(centroid_tilde,<sp/>0,<sp/>row_length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*centroid_tilde));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;N;<sp/>++n){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid_tilde[l]<sp/>+=<sp/>quality[n][l];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_count<sp/>+=<sp/>freq[n][l];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Determines<sp/>what<sp/>data<sp/>to<sp/>use:<sp/>global(expected_freq)<sp/>or<sp/>local(centroid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>exp_freq;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_freq==NULL)<sp/>exp_freq<sp/>=<sp/>centroid;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>exp_freq<sp/>=<sp/>expected_freq;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid_tilde[l]<sp/>-=<sp/>total_count<sp/>*<sp/>exp_freq[l]<sp/>*<sp/>expected_qual[l];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid_tilde[l]<sp/>/=<sp/>sqrt(exp_freq[l]<sp/>*<sp/>expected_qual[l]);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>+=<sp/>centroid_tilde[l]<sp/>*<sp/>centroid_tilde[l];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/>sqrt(S);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;row_length;<sp/>++l){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centroid_tilde[l]<sp/>/=<sp/>S;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="centroid.cc"/>
  </compounddef>
</doxygen>
